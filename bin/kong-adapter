#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('kong-adapter:kong-adapter');
var http = require('http');
var request = require('request');
var async = require('async');

var envReader = require('portal-env');

debug("Kong Adapter environment: " + app.get('env'));

var environment = app.get('env');
if (!environment)
    throw new Error('Environment variable NODE_ENV must be set.');

var kong = require('../kong/index');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3002');
app.set('port', port);

var apiUrl = envReader.resolveApiUrl();
app.set('api_url', apiUrl);

var myUrl = process.env.PORTAL_KONG_ADAPTER_URL;
if (!myUrl) {
    myUrl = envReader.guessServiceUrl('portal-kong-adapter', '3002');
    console.log('Environment variable PORTAL_KONG_ADAPTER_URL is not set, defaulting to ' + myUrl + '. If this is not correct, please set before starting this process.');
}
if (!myUrl.endsWith('/')) // Add a trailing slash here.
    myUrl = myUrl + '/';
app.set('my_url', myUrl);

var kongUrl = process.env.PORTAL_KONG_ADMIN_URL;
if (!kongUrl) {
    kongUrl = envReader.guessServiceUrl('kong', '8001');
    console.log('Environment variable PORTAL_KONG_ADMIN_URL is not set, defaulting to ' + kongUrl + '. If this is not correct, please set before starting this process.');
}
if (!kongUrl.endsWith('/'))
    kongUrl = kongUrl + '/';
app.set('kong_url', kongUrl);

// Create HTTP server.
var server = http.createServer(app);

// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

debug('Waiting for API to be available.');

app.apiAvailable = false;
app.kongAvailable = false;

async.parallel({
    apiPing: function(callback) {
        envReader.awaitUrl(apiUrl + 'ping', -1, 5000, function(err, result) {
            debug('Await API returned.');
            if (!err) {
                app.apiAvailable = true;
                debug('Await API succeeded.');
            }
            callback(err, result);
        });
    },
    kongPing: function(callback) {
        envReader.awaitUrl(kongUrl, -1, 5000, function(err, result) {
            debug('Await Kong returned.');
            if (!err) {
                app.kongAvailable = true;
                debug('Await Kong succeeded.');
            }
            callback(err, result);
        });
    }
}, function (err) {
    debug('Kong and API await finished.');
    if (err) {
        debug('Failed waiting for API and/or Kong.');
        throw err;
    }
    // Now let's register with the portal API; we'll use the standard Admin
    var initOptions = {
        initGlobals: true,
        syncApis: true,
        syncConsumers: true
    };
    kong.init(app, initOptions, function (err) {
        debug('kong.init() returned.');
        if (err) {
            debug('Could not initialize Kong adapter.');
            throw err;
        }

        // Graceful shutdown
        process.on('SIGINT', function() {
            debug("Gracefully shutting down.");
            kong.deinit(app, function(err) {
                process.exit();
            });
        });

        debug("Kong Adapter initialization done.");
        app.initialized = true;
    });
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr : 
        'port ' + addr.port;
    debug('Listening on ' + bind);
}
